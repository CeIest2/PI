import sys
import argparse
from neo4j import GraphDatabase, exceptions

# ==========================================================
#  CONFIGURATION DE LA CONNEXION NEO4J
# ==========================================================
# Modifiez ces valeurs pour correspondre √† votre configuration
URI = "bolt://localhost:7687"
AUTH = ("neo4j", "password")
# ==========================================================

# ==========================================================
#  PARAM√àTRES PAR D√âFAUT POUR LES REQU√äTES
# ==========================================================
DEFAULT_COUNTRY = "FR"
DEFAULT_DOMAIN = "gouv.fr"
DEFAULT_ASN = 16276
# ==========================================================

def load_query_from_file(file_path: str) -> str:
    """
    Charge une requ√™te Cypher depuis un fichier sp√©cifi√©.
    En cas d'erreur (fichier non trouv√©, etc.), le script s'arr√™te.
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            print(f"‚úÖ Fichier '{file_path}' lu avec succ√®s.")
            return f.read()
    except FileNotFoundError:
        print(f"‚ùå Erreur : Le fichier '{file_path}' n'a pas √©t√© trouv√©.", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Erreur inattendue lors de la lecture du fichier : {e}", file=sys.stderr)
        sys.exit(1)

def main():
    """
    Fonction principale du script.
    """
    parser = argparse.ArgumentParser(
        description="Ex√©cute une requ√™te Cypher d'un fichier sur une base Neo4j."
    )
    parser.add_argument(
        "file_path", 
        help="Le chemin vers le fichier .cypher contenant la requ√™te."
    )
    
    # --- MODIFICATION ICI : Ajout du param√®tre 'default' ---
    parser.add_argument(
        "--country", 
        default=DEFAULT_COUNTRY,
        help=f"Valeur pour le param√®tre $countryCode (d√©faut: {DEFAULT_COUNTRY})"
    )
    parser.add_argument(
        "--domain", 
        default=DEFAULT_DOMAIN,
        help=f"Valeur pour le param√®tre $domainName (d√©faut: {DEFAULT_DOMAIN})"
    )
    parser.add_argument(
        "--asn", 
        type=int, 
        default=DEFAULT_ASN,
        help=f"Valeur pour le param√®tre $hostingASN (d√©faut: {DEFAULT_ASN})"
    )

    args = parser.parse_args()

    cypher_query = load_query_from_file(args.file_path)
    
    # Il n'est plus n√©cessaire de v√©rifier si les arguments existent,
    # car argparse leur assigne toujours une valeur (celle fournie ou celle par d√©faut).
    params = {
        "countryCode": args.country,
        "domainName": args.domain,
        "hostingASN": args.asn
    }

    print(f"‚öôÔ∏è  Param√®tres utilis√©s : {params}")

    try:
        with GraphDatabase.driver(URI, auth=AUTH) as driver:
            print("‚ö°Ô∏è Connexion √† la base de donn√©es Neo4j...")
            driver.verify_connectivity()
            print("‚úîÔ∏è Connexion r√©ussie !")

            print("\nüöÄ Ex√©cution de la requ√™te...")
            records, summary, _ = driver.execute_query(
                cypher_query,
                parameters_=params,
                database_="neo4j"
            )

            print("\n" + "="*30)
            print(f"üìä R√âSULTATS ({len(records)} enregistrements)")
            print("="*30)

            if not records:
                print("La requ√™te n'a retourn√© aucun r√©sultat.")
            else:
                for i, record in enumerate(records):
                    print(f"--- Enregistrement #{i + 1} ---")
                    for key, value in record.data().items():
                        print(f"  - {key}: {value}")
                print("##################")
                print(records)

            print("\n" + "="*30)
            print("üìù R√âSUM√â DE L'EX√âCUTION")
            print("="*30)
            print(f"Requ√™te ex√©cut√©e en : {summary.result_available_after} ms")
            print(f"Base de donn√©es cibl√©e : '{summary.database}'")

    except exceptions.ServiceUnavailable:
        print(f"\n‚ùå Erreur : Impossible de se connecter √† Neo4j sur {URI}.", file=sys.stderr)
        sys.exit(1)
    except exceptions.AuthError:
        print("\n‚ùå Erreur : Authentification refus√©e. V√©rifiez vos identifiants.", file=sys.stderr)
        sys.exit(1)
    except exceptions.CypherSyntaxError as e:
        print(f"\n‚ùå Erreur de syntaxe Cypher : {e}", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Une erreur inattendue est survenue : {e}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()